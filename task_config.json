{
  "task": {
    "CA": {
      "task_description": "The Combinatorial Auction (CA) task is a combinatorial optimization problem where a set of items is auctioned to a set of bidders. Each bidder can bid on a combination of items, and the goal is to maximize the total revenue by selecting a subset of bids that satisfy the constraints.",
      "variable_type": {
        "x": {
          "type": "binary",
          "description": "The variable x_i indicates whether bid i is accepted (1) or not (0). The variable x is used to make decisions about which bids to include in the solution. For each bid, x_i is either 0 or 1, where 1 means the bid is selected and 0 means it is not selected.",
          "index": "x_i",
          "range": "[0, 1]",
          "constraints": "For each bid i, x_i is a binary decision variable representing whether the bid is included in the solution. The value of x_i can only be 0 or 1, and the decision to include or exclude a bid impacts the satisfaction of the constraints."
        }
      },
      "constraint_type": {
        "Item Allocation Constraint": {
          "type": "linear, inequality, leq",
          "description": "Constraint c_j ensuring that each item j in {1, 2, ..., n_items} can only be selected by one bid (x_k). The sum of x_i for each item j must be â‰¤ 1. It is useful to prevent the solution from becoming infeasible or too costly by limiting the number of bids that can be selected in the final solution.",
          "index": "c_j (j <= n_items )",
          "expression": "sum(x_i for i in bids) <= 1, where i in {1, 2, ..., n_bids}",
          "constraints": "For each item j, the sum of x_i (where i is a bid associated with item j) should be at most 1, ensuring that no item is selected by more than one bid."
        },
        "Substitutable Bids Constraint":{
            "type": "linear inequality, leq",
            "description": "Ensures that at most one bid from each group of substitutable bids can be accepted. This constraint enforces mutual exclusivity among substitutable bids generated by the same bidder.",
            "index": "c_k (n_items <= k <= n_constraints)",
            "expression": "sum_{b_i in B_j} x_i leq 1, where B_j is a substitutable bid group for bidder j",
            "constraints": "For each substitutable bid group B_j (generated by a bidder), the sum of decision variables x_i for all bids b_i in the group must be less than or equal to 1. This ensures that no more than one bid from the group is accepted. Here, x_i is a binary decision variable where x_i=1 indicates bid b_i is accepted, and x_i=0 indicates it is rejected. j is the index of the substitutable bid group."
        },
        "objective": {
          "type": "linear",
          "description": "Objective function to maximize the total revenue by selecting a subset of bids that satisfy the constraints.",
          "index": "obj",
          "expression": "maximize sum(revenue_i * x_i for i in bids), where i in {1, 2, ..., n_bids}",
          "constraints": "The objective function is to maximize the total revenue by selecting a subset of bids that satisfy the constraints. The revenue_i is the revenue generated by bid i, and x_i is the binary decision variable indicating whether bid i is selected."
        }
      },
      "edges":[
        {
          "source": "0",
          "target": "0",
          "feature": 0.8
        },
        {
          "source": "0",
          "target": "1",
          "feature": 0.5
        }
      ]
    },



    "WA": {
      "task_description": "The Workload Apportionment (WA) task is a combinatorial optimization problem that aims to minimize the total cost of processing workloads while ensuring robustness against worker failures. Each worker has a fixed capacity and activation cost, and each workload has specific processing requirements and allowed workers. The goal is to allocate work to workers while considering these constraints and minimizing costs.",
      "variable_type": {
        "worker_used": {
          "type": "binary",
          "description": "Indicates whether worker formula_i is activated (1) or not (0). Activating a worker incurs its fixed activation cost.",
          "index": "worker_used_i",
          "range": "[0, 1]",
          "constraints": "worker_used_i = 1 if any workload is assigned to worker i; otherwise, worker_used_i = 0."
        },
        "reserved_capacity": {
          "type": "continuous",
          "description": "Indicates the amount of work reserved on worker formula_i for workload formula_j. This value cannot exceed the worker's capacity and must be non-negative.",
          "index": "reserved_capacity_i_j",
          "range": "[0, inf)",
          "constraints": "reserved_capacity_i_j must be non-negative and can only be assigned to workers allowed to process workload formula_j."
        }
      },
      "constraint_type": {
        "worker_used_ct": {
          "type": "linear, inequality, greater or eq",
          "description": "Tracks whether a worker formula_i is activated when it is assigned workload formula_j.",
          "index": "worker_used_ct_i_j",
          "expression": "reserved_capacity_i_j <= worker_used_i * formula_capacity_i",
          "constraints": "If any capacity is reserved on a worker for a workload, the worker must be activated."
        },
        "worker_capacity_ct": {
          "type": "linear, inequality, less or eq",
          "description": "Ensures that the total reserved capacity on a worker does not exceed its maximum capacity.",
          "index": "worker_capacity_ct_i",
          "expression": "sum(reserved_capacity_i_j for all j) <= formula_capacity_i",
          "constraints": "Total reserved capacity for all workloads on a worker must respect its capacity."
        },
        "workload_ct": {
          "type": "linear, inequality, less or eq",
          "description": "Ensures that there is sufficient capacity to process workload formula_j even if any one worker formula_i fails.",
          "index": "workload_ct_j_failure_i",
          "expression": "sum(reserved_capacity_k_j for all k != i) >= workload_amount_j",
          "constraints": "The sum of capacities reserved for a workload across all active workers except the failing worker must meet or exceed the workload's requirements."
        },
        "objective": {
          "type": "linear",
          "description": "Minimizes the total activation and reservation costs of all workers.",
          "index": "obj",
          "expression": "minimize sum(worker_used_i * activation_cost_i for all i) + sum(reserved_capacity_i_j * cost_per_unit_capacity_i_j for all i, j)",
          "constraints": "Objective function combines the fixed activation cost of workers and the cost of reserved capacities for workloads."
        }
      },
      "edges": [
        {
          "source": "0",
          "target": "0",
          "feature": 0.8
        },
        {
          "source": "0",
          "target": "1",
          "feature": 0.5
        }
      ]
    },


    "IP": {
    "task_description": "The Imbalance Problem (IP) task involves placing items into bins while minimizing the imbalance of resource usage across all bins. Each item has fixed resource requirements for multiple resource types, and each bin has fixed capacities for these resources. The goal is to allocate items to bins in a way that minimizes the normalized imbalance of resources.",
    "variable_type": {
      "place": {
        "type": "binary",
        "description": "Indicates whether item formula_i is placed in bin formula_b (1) or not (0).",
        "index": "place_i_b",
        "range": "[0, 1]",
        "constraints": "place_i_b = 1 if item i is placed in bin b; otherwise, place_i_b = 0."
      },
      "deficit": {
        "type": "continuous",
        "description": "Tracks the normalized imbalance of resource formula_r in bin formula_b. A higher value indicates a greater imbalance.",
        "index": "deficit_b_r",
        "range": "[0, 1]",
        "constraints": "deficit_b_r must be a non-negative continuous variable representing the normalized imbalance for each bin and resource."
      },
      "max_deficit": {
        "type": "continuous",
        "description": "Tracks the maximum normalized imbalance of resource formula_r across all bins.",
        "index": "max_deficit_r",
        "range": "[0, 1]",
        "constraints": "max_deficit_r must be a non-negative continuous variable representing the maximum normalized imbalance for each resource across all bins."
      }
    },
    "constraint_type": {
      "copies_ct": {
        "type": "linear, equality",
        "description": "Ensures that each item formula_i is placed in exactly one bin.",
        "index": "copies_ct_i",
        "expression": "sum(place_i_b for all b) = 1",
        "constraints": "Each item must be placed in one and only one bin."
      },
      "supply_ct": {
        "type": "linear, inequality, less or eq",
        "description": "Ensures that the total resource usage for formula_r in bin formula_b does not exceed the bin's capacity.",
        "index": "supply_ct_b_r",
        "expression": "sum(place_i_b * resource_required_i_r for all i) <= resource_available_b_r",
        "constraints": "Total resource usage for a bin must respect its capacity for each resource."
      },
      "deficit_ct": {
        "type": "linear, inequality, greater or eq",
        "description": "Tracks the normalized imbalance of resource formula_r in bin formula_b.",
        "index": "deficit_ct_b_r",
        "expression": "deficit_b_r >= (sum(place_i_b * resource_required_i_r for all i) / resource_available_b_r) - 1",
        "constraints": "Deficit for a resource in a bin must reflect the normalized imbalance."
      },
      "max_deficit_ct": {
        "type": "linear, inequality, greater or eq",
        "description": "Tracks the maximum normalized imbalance of resource formula_r across all bins.",
        "index": "max_deficit_ct_r",
        "expression": "max_deficit_r >= deficit_b_r for all b",
        "constraints": "The maximum deficit for each resource must be greater than or equal to the deficit in any bin."
      },
      "objective": {
        "type": "linear",
        "description": "Minimizes the maximum normalized imbalance of resources across all bins.",
        "index": "obj",
        "expression": "minimize max(max_deficit_r for all r)",
        "constraints": "Objective function aims to minimize the maximum normalized imbalance of resource usage across bins."
      }
    },
    "edges": [
      {
        "source": "0",
        "target": "0",
        "feature": 0.8
      },
      {
        "source": "0",
        "target": "1",
        "feature": 0.5
      }
    ]
  }

  }
}

